"""
Вычислить сумму знакопеременного ряда |х^(n-1)|/(n-1)!, где х-матрица ранга к (к и матрица задаются случайным образом),
n - номер слагаемого.Сумма считается вычисленной, если точность вычислений будет не меньше t знаков после запятой.
У алгоритма д.б. линейная сложность. Операция умножения –поэлементная. Знак первого слагаемого -случайный.

(наличие комментариев для каждого функционально законченного блока обязательно)
"""

import random
import numpy as np
from decimal import Decimal, getcontext


# Функция для вычисления суммы знакопеременного ряда
def sum_of_the_series(t):
    curr_x = x.copy()  # Текущая матрица
    factorial = 1  # Накопляемый факториал
    res = 0  # Переменная результата
    curr_term = Decimal(np.linalg.det(curr_x))
    sign = random.choice([-1, 1])  # Переменная для смены знака(Знак первого слагаемого -случайный.)
    res += sign * curr_term  # Переменная результата
    n = 2  # Номер слагаемого

    while True:
        # Проверка точности
        if abs(curr_term) < 1 / (10 ** t):
            break

        # Меняем параметры для следующего слагаемого
        curr_x *= x
        n += 1
        sign = -sign
        factorial *= (n - 1)

        curr_term = Decimal(np.linalg.det(curr_x) / factorial)  # Вычисляем текущий член ряда
        res += sign * curr_term  # Прибавляем его к результату с учетом знака

    return res


try:
    # Ввод значения t
    print("Введите число t, являющееся количеством знаков после запятой:")
    t = int(input())
    while t > 300 or t < 1:  # ошибка в случае введения слишком малой точности
        t = int(input("Вы ввели число, неподходящее по условию, введите число t, большее или равное 1:\n"))
    print()

    k = random.randint(2, 10)  # задание ранга матрицы
    x = np.round(np.random.uniform(-1, 1, (k, k)), 3)  # создание матрицы (элементы матрицы от -1 до +1)

    # вывод сформированной матрицы
    print("Случайно сгенерированная матрица:")
    print(x)

    # Установка точности вычислений
    getcontext().prec = t

    # Вызов функции sum_of_the_series для вычисления суммы ряда точностью t
    result = sum_of_the_series(t)

    # Вывод результата
    print(f"Сумма ряда с точностью {t} знаков после запятой: {result:.{t}f}".rstrip('0'))

except ValueError:
    print("\nВведенный символ не является числом. Перезапустите программу и введите число.")
