"""
Вычислить сумму знакопеременного ряда |х^(n-1)|/(n-1)!, где х-матрица ранга к (к и матрица задаются случайным образом), n - номер слагаемого.
Сумма считается вычисленной, если точность вычислений будет не меньше t знаков после запятой. У алгоритма д.б. линейная сложность.
Операция умножения –поэлементная. Знак первого слагаемого -случайный.

(наличие комментариев для каждого функционально законченного блока обязательно)
"""

import random
import numpy as np
from decimal import Decimal, getcontext


def factorial(n):  # Функция для вычисления факториала
    factorial = 1
    for i in range(1, n + 1):
        factorial = i * factorial
    return factorial


def matrix(curr_x, n):  # Вычисляем матрицу
    matrix = curr_x
    for _ in range(n):
        matrix *= matrix
    return matrix


# Функция для вычисления суммы знакопеременного ряда
def sum_of_the_series(t):
    res = 0  # Переменная результата
    n = 1  # Номер слагаемого
    curr_x = x  # Текущая матрица
    sign = random.choice([-1, 1])  # Переменная для смены знака(Знак первого слагаемого -случайный.)

    while True:
        curr_term = Decimal(np.linalg.det(matrix(curr_x, n - 1)) / factorial(n - 1))  # Вычисляем текущий член ряда

        res += sign * curr_term  # Прибавляем его к результату с учетом знака

        # Проверка точности
        if abs(curr_term) < 1 / (10 ** t):
            break

        # Меняем параметры для следующего слагаемого
        n += 1
        sign = -sign

    return res


try:
    # Ввод значения t
    print("Введите число t, являющееся количеством знаков после запятой:")
    t = int(input())
    while t > 323 or t < 1:  # ошибка в случае введения слишком малой точности
        t = int(input("Вы ввели число, неподходящее по условию, введите число t, 1 <= t <= 323:\n"))
    print()

    k = random.randint(2, 10)  # задание ранга матрицы
    x = np.round(np.random.uniform(-1, 1, (k, k)), 3)  # создание матрицы (элементы матрицы от -1 до +1)

    # вывод сформированной матрицы
    print("Случайно сгенерированная матрица:")
    print(x)

    # Установка точности вычислений
    getcontext().prec = t

    # Вызов функции sum_of_the_series для вычисления суммы ряда точностью t
    result = sum_of_the_series(t)

    # Вывод результата
    print(f"Сумма ряда с точностью {t} знаков после запятой: {result:.{t}f}".rstrip('0'))


except ValueError:
    print("\nВведенный символ не является числом. Перезапустите программу и введите число.")
